[General]

## Calculate DPI scale from screen size,
## DPI Scale = Max(Width / 1920, Height / 1080) .
# Setting type: Boolean
# Default value: true
AutoDpiScale = true

## Minimum value for auto-calculated DPI scale, defaults to 0.8
## so it wouldn't scale down further if screen size goes down 1536x864 .
# Setting type: Single
# Default value: 0.8
# Acceptable value range: From 0.1 to 10
AutoDpiScaleMin = 0.8

## Relative zooming scale, would multiplies DPI scale.
# Setting type: Single
# Default value: 1
# Acceptable value range: From 0.1 to 10
ZoomScale = 1

## Fixed DPI scale, set AutoDpiScale=false to activate,
## the size of IMGUI elements wouldn't be changed on screen size change.
# Setting type: Single
# Default value: 1.5
# Acceptable value range: From 0.1 to 10
FixedDpiScale = 1.5

[Opt-out]

## Opt-out scaling for matched namespace, specify namespace of IMGUI MonoBehavior component
## if it has implemented HiDPI scaling like this patcher.
# Setting type: String
# Default value:
OptOutNsRegex =

[ScreenOverride]

## We scale down Screen.width and Screen.height to have window border not overflowing after re-scaling up, in MonoBehavior.OnGUI callback.
## However some plugin uses Screen.width and Screen.height out side of OnGUI, causing window border to overflow.
## To work around that we collect namespaces of registered MonoBehavior.OnGUI in plugins,
## and when other method in the same namespace or child namespace calls Screen.width and/or Screen.height,
## we check call stack and scale down screen size regardless.
# Setting type: Boolean
# Default value: true
AutoOverrideNs = true

## Extra namespace pattern for Screen overriding, specify .NET regular expressions here.
# Setting type: String
# Default value: ^ConfigurationManager(\..+)?
ExtraOverrideNsRegex = ^ConfigurationManager(\..+)?

## Exclude matched namespace from Screen overriding, specify .NET regular expressions here.
# Setting type: String
# Default value: ^UnityEngine(\..+)?
ExcludeNsRegex = ^UnityEngine(\..+)?
